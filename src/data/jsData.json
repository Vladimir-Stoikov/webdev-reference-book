{
  "jsLessons": [
    {"id": 1, "header": "Что такое", "content": "JavaScript — это кросс-платформенный, объектно-ориентированный скриптовый язык, являющийся небольшим и легковесным. Внутри среды исполнения JavaScript может быть связан с объектами данной среды и предоставлять программный контроль над ними. JavaScript включает стандартную библиотеку объектов, например, Array, Date и Math, а также базовый набор языковых элементов, например, операторы и управляющие конструкции. Ядро JavaScript может быть расширено для различных целей путём добавления в него новых объектов, например: JavaScript на стороне клиента расширяет ядро языка, предоставляя объекты для контроля браузера и его Document Object Model (DOM). Например, клиентские расширения позволяют приложению размещать элементы в форме HTML и обрабатывать пользовательские события, такие как щелчок мыши, ввод данных в форму и навигация по страницам. JavaScript на стороне сервера расширяет ядро языка, предоставляя объекты для запуска JavaScript на сервере. Например, расширение на стороне сервера позволяет приложению соединяться с базой данных, обеспечивать непрерывность информации между вызовами приложения или выполнять манипуляции над файлами на сервере."},
    {"id": 2, "header": "Грамматика и типы", "content": "JavaScript чувствителен к регистру и использует кодировку символов Unicode. Например, слово Früh (\"рано\" по-немецки) может использоваться в качестве имени переменной. В JavaScript инструкции называются statements и разделяются точкой с запятой (;). Пробел (space), табуляция (tab) и перевод строки (newline) называются пробельными символами (whitespace). Исходный текст скриптов на JavaScript сканируется слева направо и конвертируется в последовательность входных элементов, являющихся токенами (tokens), управляющими символами, символами конца строки, комментариями или пробельными символами. ECMAScript также определяет некоторые ключевые слова и литералы и устанавливает правила для автоматической вставки точек с запятой (ASI), чтобы обозначить конец инструкций (statements). Однако, рекомендуется всегда ставить точку с запятой в конце каждой инструкции вручную, чтобы избежать побочных эффектов. Чтобы получить более подробную информацию, прочитайте Lexical Grammar."}
  ],
  "tsLessons": [
    {"id": 1, "header": "Типизирование переменных", "content": "// numbers\nlet x = 10;\nlet y = 5.5;\nlet z = NaN;\n\n// bigInt \nlet bigX = 1321n; \n\n// string \nlet str1 = \"boop\";\nlet str2: string;\nstr2 = \"hi\";\n\n// symbol \nlet symb = Symbol('as');\n\n// boolean \nlet compare = true;\ncompare = false\n\n// undefined (надо задавать самому, если не прописано в компиляторе)\nconst missed: undefined = undefined;\n\n// null (надо задавать самому, если не прописано в компиляторе) \nconst empty: null = null;\n\n// literal (конкретное значение, которое не может претерпевать изменений. Задается константой)\nconst litNum = 777;\nconst litStr = 'lucky';\n\n// any (Тип для крайнего случая как временная затычка, которую нужно в будущем править. Не дает подсказок после точки)\nlet universal: any = 1;\nuniversal = 'str';\nuniversal = [];\n\n// unknow (Используется когда тип переменной будет определяться в будущем. Не дает такой же свободы как и any, например требует проверки типа через условие)\nlet unknown: unknown = \"lowercase\";\nif(typeof unknown === \"string\") unknown.toUpperCase();"},
    {"id": 2, "header": "Типизирование функций", "content": "1) Базовый синтаксис.\n\nfunction sum(a: number, b: number): number {\n  return a + b;\n}\n\n// Параметры функции типизировать обязательно, возвращаемое значение обычно определяется правильно.\n\n// 2) необычные возвращаемые типы\n\nfunction log(name: string, userId?: string): void {\n  console.log(\"Log \", name, \" User Id is \", userId || \"none\");\n}\n\n// Тип \"void\" для возвращаемого значения функции обозначет, что она ничего не вернет, но завершится.\n// Значек \"?\" после параметра функции показывает что он необязателен. \n// Аргумент будет принимать и значения указанного типа и undefined.\n\nfunction crash(): never {\n  throw new Error(\"crash\");\n}\n\n// Использование типа \"never\" указывает на то, что функция не будет завершена.\n\n// 3) типизация параметра массива\n\nfunction average(...nums: number[]): number {\n  const sum = nums.reduce((total, current) => total + current, 0);\n  return sum / nums.length;\n}\n\n// 4) Примеры со стрелочной функций и функциональным выражением\n\nconst sum2 = (a: number, b: number): number => {\n  return a + b;\n}\n\nconst sum3 = function (a: number, b: number): number {\n  return a + b;\n}\n\n// Упражнение\n\nfunction slice(str: string, start: number, end?: number): string {\n  let newStr = '';\n\n  let lastIndex: number;\n\n  if(end) {\n    lastIndex = end > str.length ? str.length : end;\n  } else {\n    lastIndex = str.length;\n  }\n\n  for (let i = start; i < lastIndex; i++) {\n    newStr += str[i];    \n  }\n\n  return newStr;\n}"},
  ]
}